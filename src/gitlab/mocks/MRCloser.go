// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	gitlabTypes "gitlab-mr-autocloser/src/gitlab/types"

	gitlab "github.com/xanzy/go-gitlab"

	mock "github.com/stretchr/testify/mock"
)

// MRCloser is an autogenerated mock type for the MRCloser type
type MRCloser struct {
	mock.Mock
}

// CloseMRs provides a mock function with given fields: c, mrs
func (_m *MRCloser) CloseMRs(c *gitlab.Client, mrs *[]gitlabTypes.MRWithMeta) {
	_m.Called(c, mrs)
}

// GetOpenMRs provides a mock function with given fields: c
func (_m *MRCloser) GetOpenMRs(c *gitlab.Client) *[]gitlabTypes.MRWithMeta {
	ret := _m.Called(c)

	var r0 *[]gitlabTypes.MRWithMeta
	if rf, ok := ret.Get(0).(func(*gitlab.Client) *[]gitlabTypes.MRWithMeta); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]gitlabTypes.MRWithMeta)
		}
	}

	return r0
}

// ManageMergeRequests provides a mock function with given fields:
func (_m *MRCloser) ManageMergeRequests() {
	_m.Called()
}

// SetLabelMR provides a mock function with given fields: c, mr
func (_m *MRCloser) SetLabelMR(c *gitlab.Client, mr *gitlabTypes.MRWithMeta) {
	_m.Called(c, mr)
}

type mockConstructorTestingTNewMRCloser interface {
	mock.TestingT
	Cleanup(func())
}

// NewMRCloser creates a new instance of MRCloser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMRCloser(t mockConstructorTestingTNewMRCloser) *MRCloser {
	mock := &MRCloser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
